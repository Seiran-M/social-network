import React, {FC} from 'react'import {InjectedFormProps, reduxForm} from 'redux-form'import {connect} from 'react-redux'import {Redirect} from 'react-router-dom'import {createField, Input} from '../../common/FormsContfolls/FormsControlls'import {required} from '../../utils/validator'import {login} from '../../redux/auth-reducer'import {AppStateType} from '../../redux/redux-store'import styles from '../../common/FormsContfolls/FormsControlls.module.css'export const LoginForm: FC<InjectedFormProps<FormDataType>> = React.memo((props) => {   const {handleSubmit, error} = props   return (      <>         <form onSubmit={handleSubmit}>            {createField('Email', 'email', [required], Input)}            {createField('Password', 'password', [required], Input, {type: 'password'})}            {createField(null, 'rememberMe', null, Input, {type: 'checkbox'}, 'remember me')}            {error && <div className={styles.formSummaryError}>{error}</div>}            <button>Login</button>         </form>      </>   )})const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)const Login: FC<LoginPropsType> = React.memo((props) => {   const {login, isAuth} = props   const onSubmit = (formData: FormDataType) => login(formData.email, formData.password, formData.rememberMe)   if (isAuth) {      console.log('REDIRECT')      return (         <Redirect to={'/profile'}/>      )   }   return (      <>         <h1>Login</h1>         <LoginReduxForm onSubmit={onSubmit}/>      </>   )})const mapStateToProps = (state: AppStateType) => ({   isAuth: state.auth.isAuth})export default connect(mapStateToProps, {login})(Login)// typestype FormDataType = {   email: string   password: string   rememberMe: boolean}type LoginPropsType = {   isAuth: boolean   login: (email: string, password: string, rememberMe: boolean ) => void}