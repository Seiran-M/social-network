import {connect} from 'react-redux'import {follow, getUsers, setCurrentPage, toggleFollowingProgress, unfollow, Usertype} from '../../redux/users-reducer'import {AppStateType} from '../../redux/redux-store'import React from 'react'import {Users} from './Users'import {Preloader} from '../Preloader/Preloader'type UsersContainerPropsType = {   users: Array<Usertype>   follow: (userId: number) => void   unfollow: (userId: number) => void   setCurrentPage: (pageNumber: number) => void   pageSize: number   totalUsersCount: number   currentPage: number   isFetching: boolean   followingInProgress: any[]   getUsers:(currentPage:number, pageSize:number)=>void}class UsersContainer extends React.Component<UsersContainerPropsType> {   componentDidMount() {      this.props.getUsers(this.props.currentPage, this.props.pageSize)   }   onPageChanged = (pageNumber: number) => {      this.props.getUsers(pageNumber, this.props.pageSize)   }   render() {      return (         <>            {this.props.isFetching ? <Preloader/> : null}            <Users               totalUsersCount={this.props.totalUsersCount}               pageSize={this.props.pageSize}               currentPage={this.props.currentPage}               onPageChanged={this.onPageChanged}               users={this.props.users}               follow={this.props.follow}               unfollow={this.props.unfollow}               // toggleFollowingProgress={this.props.toggleFollowingProgress}               followingInProgress={this.props.followingInProgress}            />         </>      )   }}export const mapStateToProps = (state: AppStateType) => ({   users: state.usersPage.users,   pageSize: state.usersPage.pageSize,   totalUsersCount: state.usersPage.totalUsersCount,   currentPage: state.usersPage.currentPage,   isFetching: state.usersPage.isFetching,   followingInProgress: state.usersPage.followingInProgress})export default connect(mapStateToProps,   {      follow,      unfollow,      setCurrentPage,      toggleFollowingProgress,      getUsers,   })(UsersContainer)