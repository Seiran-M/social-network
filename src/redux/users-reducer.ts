import {usersAPI} from '../api/api'import {Dispatch} from 'redux'export enum ACTIONS_TYPE {   FOLLOW = 'FOLLOW',   UNFOLLOW = 'UNFOLLOW',   SET_USERS = 'SET_USERS',   SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',   SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',   TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',   TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'}export type UsersStateType = {   users: Array<Usertype>   pageSize: number   totalUsersCount: number   currentPage: number   isFetching: boolean   followingInProgress: any[]}export type Usertype = {   id: number   name: string   status: string   photos: PhotosType   followed: boolean}type PhotosType = {   small: string   large: string}const initialState: UsersStateType = {   users: [],   pageSize: 10,   totalUsersCount: 0,   currentPage: 1,   isFetching: true,   followingInProgress: []}export type FollowActionType = {   type: typeof ACTIONS_TYPE.FOLLOW   userId: number}export type UnfollowActionType = {   type: typeof ACTIONS_TYPE.UNFOLLOW   userId: number}export type SetUsersActionType = {   type: typeof ACTIONS_TYPE.SET_USERS   users: Array<Usertype>}export type setCurrentPageType = {   type: typeof ACTIONS_TYPE.SET_CURRENT_PAGE   currentPage: number}export type setTotalUsersCountType = {   type: typeof ACTIONS_TYPE.SET_TOTAL_USERS_COUNT   totalCount: number}export type toggleIsFetchingType = {   type: typeof ACTIONS_TYPE.TOGGLE_IS_FETCHING   isFetching: boolean}export type toggleIsFollowingProgressType = {   type: typeof ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS   isFetching: boolean   userId: number}export type ActionsType =   FollowActionType   | UnfollowActionType   | SetUsersActionType   | setCurrentPageType   | setTotalUsersCountType   | toggleIsFetchingType   | toggleIsFollowingProgressTypeexport const usersReducer = (state = initialState, action: ActionsType): UsersStateType => {   switch (action.type) {      case ACTIONS_TYPE.FOLLOW:         return {            ...state,            users: state.users.map(u => {               if (u.id === action.userId) {                  return {...u, followed: true}               }               return u            })         }      case ACTIONS_TYPE.UNFOLLOW:         return {            ...state,            users: state.users.map(u => {               if (u.id === action.userId) {                  return {...u, followed: false}               }               return u            })         }      case ACTIONS_TYPE.SET_USERS: {         return {...state, users: action.users}      }      case ACTIONS_TYPE.SET_CURRENT_PAGE: {         return {...state, currentPage: action.currentPage}      }      case ACTIONS_TYPE.SET_TOTAL_USERS_COUNT: {         return {...state, totalUsersCount: action.totalCount}      }      case ACTIONS_TYPE.TOGGLE_IS_FETCHING: {         return {...state, isFetching: action.isFetching}      }      case ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS: {         return {            ...state,            followingInProgress: action.isFetching               ? [...state.followingInProgress, action.userId]               : state.followingInProgress.filter(id => id !== action.userId)         }      }      default:         return state   }}export const followSuccess = (userId: number): FollowActionType => {   return {type: ACTIONS_TYPE.FOLLOW, userId}}export const unfollowSuccess = (userId: number): UnfollowActionType => {   return {type: ACTIONS_TYPE.UNFOLLOW, userId}}export const setUsers = (users: Array<Usertype>): SetUsersActionType => {   return {type: ACTIONS_TYPE.SET_USERS, users}}export const setCurrentPage = (currentPage: number): setCurrentPageType => {   return {type: ACTIONS_TYPE.SET_CURRENT_PAGE, currentPage}}export const setTotalUsersCount = (totalCount: number): setTotalUsersCountType => {   return {type: ACTIONS_TYPE.SET_TOTAL_USERS_COUNT, totalCount}}export const toggleIsFetching = (isFetching: boolean): toggleIsFetchingType => {   return {type: ACTIONS_TYPE.TOGGLE_IS_FETCHING, isFetching}}export const toggleFollowingProgress = (isFetching: boolean, userId: number): toggleIsFollowingProgressType => {   return {type: ACTIONS_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}}export const getUsers = (currentPage: number, pageSize: number) => {   return (dispatch: Dispatch) => {      dispatch(toggleIsFetching(true))      usersAPI.getUsers(currentPage, pageSize)         .then(data => {            dispatch(toggleIsFetching(false))            dispatch(setUsers(data.items))            dispatch(setTotalUsersCount(data.totalCount))         })   }}export const follow = (userId: number) => {   return (dispatch: Dispatch) => {      dispatch(toggleFollowingProgress(true, userId))      usersAPI.followUser(userId)         .then(data => {            if (data.data.resultCode === 0) {               dispatch(followSuccess(userId))            }            dispatch(toggleFollowingProgress(false, userId))         })   }}export const unfollow = (userId: number) => {   return (dispatch: Dispatch) => {      dispatch(toggleFollowingProgress(true, userId))      usersAPI.unfollowUser(userId)         .then(data => {            if (data.data.resultCode === 0) {               dispatch(unfollowSuccess(userId))            }            dispatch(toggleFollowingProgress(false, userId))         })   }}