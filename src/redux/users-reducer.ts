export enum ACTIONS_TYPE {   FOLLOW = 'FOLLOW',   UNFOLLOW = 'UNFOLLOW',   SET_USERS = 'SET_USERS',   SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',   SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',   TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',}export type UsersStateType = {   users: Array<Usertype>   pageSize: number   totalUsersCount: number   currentPage: number   isFetching: boolean}export type Usertype = {   id: number   name: string   status: string   photos: PhotosType   followed: boolean   // location: LocationType}// type LocationType = {//    country: string//    city: string// }type PhotosType = {   small: string   large: string}const initialState: UsersStateType = {   users: [],   pageSize: 10,   totalUsersCount: 0,   currentPage: 1,   isFetching: false}export type FollowActionType = {   type: typeof ACTIONS_TYPE.FOLLOW   userId: number}export type UnfollowActionType = {   type: typeof ACTIONS_TYPE.UNFOLLOW   userId: number}export type SetUsersActionType = {   type: typeof ACTIONS_TYPE.SET_USERS   users: Array<Usertype>}export type setCurrentPageType = {   type: typeof ACTIONS_TYPE.SET_CURRENT_PAGE   currentPage: number}export type setTotalUsersCountType = {   type: typeof ACTIONS_TYPE.SET_TOTAL_USERS_COUNT   totalCount: number}export type toggleIsFetchingType = {   type: typeof ACTIONS_TYPE.TOGGLE_IS_FETCHING   isFetching: boolean}export type ActionsType =   FollowActionType   | UnfollowActionType   | SetUsersActionType   | setCurrentPageType   | setTotalUsersCountType   | toggleIsFetchingTypeconst usersReducer = (state = initialState, action: ActionsType): UsersStateType => {   switch (action.type) {      case ACTIONS_TYPE.FOLLOW:         return {            ...state,            users: state.users.map(u => {               if (u.id === action.userId) {                  return {...u, followed: true}               }               return u            })         }      case ACTIONS_TYPE.UNFOLLOW:         return {            ...state,            users: state.users.map(u => {               if (u.id === action.userId) {                  return {...u, followed: false}               }               return u            })         }      case ACTIONS_TYPE.SET_USERS: {         return {...state, users: action.users}      }      case ACTIONS_TYPE.SET_CURRENT_PAGE: {         return {...state, currentPage: action.currentPage}      }      case ACTIONS_TYPE.SET_TOTAL_USERS_COUNT: {         return {...state, totalUsersCount: action.totalCount}      }      case ACTIONS_TYPE.TOGGLE_IS_FETCHING: {         return {...state, isFetching: action.isFetching}      }      default:         return state   }}export const follow = (userId: number): FollowActionType => {   return {type: ACTIONS_TYPE.FOLLOW, userId}}export const unfollow = (userId: number): UnfollowActionType => {   return {type: ACTIONS_TYPE.UNFOLLOW, userId}}export const setUsers = (users: Array<Usertype>): SetUsersActionType => {   return {type: ACTIONS_TYPE.SET_USERS, users}}export const setCurrentPage = (currentPage: number): setCurrentPageType => {   return {type: ACTIONS_TYPE.SET_CURRENT_PAGE, currentPage}}export const setTotalUsersCount = (totalCount: number): setTotalUsersCountType => {   return {type: ACTIONS_TYPE.SET_TOTAL_USERS_COUNT, totalCount}}export const toggleIsFetching = (isFetching: boolean): toggleIsFetchingType => {   return {type: ACTIONS_TYPE.TOGGLE_IS_FETCHING, isFetching}}export default usersReducer