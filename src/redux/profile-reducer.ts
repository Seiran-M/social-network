import {Dispatch} from 'redux'import {profileAPI} from '../api/api'import {ACTIONS_TYPE} from './actions'import {AppStateType} from './redux-store'import {ThunkDispatch} from 'redux-thunk'import {ResponseCode} from './auth-reducer'import {stopSubmit} from 'redux-form'const initialState = {   posts: [      {id: 0, message: 'Hi, how are you?', likesCount: 12},      {id: 1, message: 'It\'s my first post!', likesCount: 55},      {id: 2, message: 'Bye', likesCount: 0},      {id: 3, message: 'Good', likesCount: 30},   ],   profile: null,   status: '',   newPostText: '',}export const profileReducer = (state = initialState, action: ActionsType): InitialStateType => {   switch (action.type) {      case ACTIONS_TYPE.ADD_POST:         const newPost = {id: new Date().getTime(), message: action.newPostText, likesCount: 0,}         return {            ...state,            posts: [...state.posts, newPost],         }      case ACTIONS_TYPE.DELETE_POST:         return {            ...state,            posts: state.posts.filter(p => p.id !== action.postId)         }      case ACTIONS_TYPE.SET_USER_PROFILE: {         return {            ...state,            profile: action.profile         }      }      case ACTIONS_TYPE.SET_STATUS: {         return {            ...state,            status: action.status         }      }      case ACTIONS_TYPE.SAVE_PHOTO_SUCCESS: {         debugger         return {            ...state,            // @ts-ignore            profile: {...state.profile, photos: action.photos}         }      }      default:         return state   }}// actionsexport const addPost = (newPostText: string) => ({type: ACTIONS_TYPE.ADD_POST, newPostText} as const)export const deletePost = (postId: number) => ({type: ACTIONS_TYPE.DELETE_POST, postId} as const)export const setUserProfile = (profile: ProfileType) => ({type: ACTIONS_TYPE.SET_USER_PROFILE, profile} as const)export const setUserStatus = (status: string) => ({type: ACTIONS_TYPE.SET_STATUS, status} as const)export const savePhotoSuccess = (photos: any) => ({type: ACTIONS_TYPE.SAVE_PHOTO_SUCCESS, photos} as const)// thunksexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {   const response = await profileAPI.getProfile(userId)   dispatch(setUserProfile(response.data))}export const getUserStatus = (userId: number) => async (dispatch: Dispatch) => {   const response = await profileAPI.getStatus(userId)   dispatch(setUserStatus(response.data))}export const updateUserStatus = (status: string) => async (dispatch: Dispatch) => {   const response = await profileAPI.updateStatus(status)   if (response.data.resultCode === ResponseCode.success) {      dispatch(setUserStatus(status))   }}export const savePhoto = (file: string | Blob) => async (dispatch: Dispatch) => {   const response = await profileAPI.savePhoto(file)   if (response.data.resultCode === ResponseCode.success) {      dispatch(savePhotoSuccess(response.data.data.photos))   }}export const saveProfile = (formData: ProfileType) =>   async (dispatch: ThunkDispatch<AppStateType, unknown, any>, getState: () => AppStateType) => {      const userId = getState().auth.id      const response = await profileAPI.saveProfile(formData)      if (response.data.resultCode === ResponseCode.success && userId !== null) {         dispatch(getUserProfile(userId))      } else {         const errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'         console.log(errorMessage)         dispatch(stopSubmit('editProfile', {_error: errorMessage}))      }   }// typesexport type PhotosType = {   small: string | undefined   large: string | undefined}export type ContactsType = {   facebook: string | null   website: string | null   vk: string | null   twitter: string | null   instagram: string | null   youtube: string | null   github: string | null   mainLink: null,}export type ProfileType = {   aboutMe: string   contacts: ContactsType   photos: PhotosType   lookingForAJob: boolean   lookingForAJobDescription: string   fullName: string   userId: number}type PostsType = {   id: number   message: string   likesCount: number}type InitialStateType = {   posts: Array<PostsType>   profile: any   status: string   newPostText: string}export type ActionsType =   ReturnType<typeof addPost>   | ReturnType<typeof deletePost>   | ReturnType<typeof setUserProfile>   | ReturnType<typeof setUserStatus>   | ReturnType<typeof savePhotoSuccess>