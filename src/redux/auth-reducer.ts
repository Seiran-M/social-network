import {authAPI} from '../api/api'import {Dispatch} from 'redux'export enum ACTIONS_TYPE {   SET_USER_DATA = 'SET_USER_DATA',}export type AuthStateType = {   id: number | null   login: string | null   email: string | null   isAuth: boolean}export type DataType = {   id: number   email: string   login: string}export type SetUserDataActionType = {   type: typeof ACTIONS_TYPE.SET_USER_DATA   data: DataType}export type ActionsType = SetUserDataActionTypeexport const initialState: AuthStateType = {   id: null,   email: null,   login: null,   isAuth: false}export const authReducer = (state = initialState, action: ActionsType): AuthStateType => {   switch (action.type) {      case ACTIONS_TYPE.SET_USER_DATA: {         return {            ...state,            ...action.data,            isAuth: true         }      }      default:         return state   }}export const setAuthUserData = (id: number, email: string, login: string): SetUserDataActionType => {   return {      type: ACTIONS_TYPE.SET_USER_DATA,      data: {id, email, login}   }}export const getAuthUserData = () => (dispatch: Dispatch) => {   authAPI.me()      .then(response => {         if (response.data.resultCode === 0) {            let {id, email, login} = response.data            dispatch(setAuthUserData(id, email, login))         }      })}