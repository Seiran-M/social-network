import {Dispatch} from 'redux'import {ThunkDispatch} from 'redux-thunk'import {stopSubmit} from 'redux-form'import {authAPI} from '../api/api'import {ACTIONS_TYPE} from './actions'// enumsexport enum ResponseCode {   success = 0,   failed = 1,   captcha = 10}export const initialState: AuthStateType = {   id: null,   email: null,   login: null,   isAuth: false}export const authReducer = (state = initialState, action: ActionsType): AuthStateType => {   switch (action.type) {      case ACTIONS_TYPE.SET_USER_DATA:         return {...state, ...action.payload}      default:         return state   }}// actionsexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) =>   ({type: ACTIONS_TYPE.SET_USER_DATA, payload: {id, email, login, isAuth}} as const)// thunksexport const getAuthUserData = () => async (dispatch: Dispatch) => {   const response = await authAPI.me()   if (response.data.resultCode === 0) {      const {id, email, login} = response.data.data      dispatch(setAuthUserData(id, email, login, true))   }}export const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: ThunkDispatch<AuthStateType, {}, any>) => {   const response = await authAPI.login(email, password, rememberMe)   if (response.data.resultCode === ResponseCode.success) {      dispatch(getAuthUserData())   } else {      const errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'      console.log(errorMessage)      dispatch(stopSubmit('login', {_error: errorMessage}))   }}export const logout = () => async (dispatch: ThunkDispatch<AuthStateType, {}, any>) => {   const response = await authAPI.logOut()   if (response.data.resultCode === ResponseCode.success) {      dispatch(setAuthUserData(null, null, null, false))   }}// typesexport type AuthStateType = {   id: number | null   login: string | null   email: string | null   isAuth: boolean}export type DataType = {   id: number   email: string   login: string}export type ActionsType = ReturnType<typeof setAuthUserData>